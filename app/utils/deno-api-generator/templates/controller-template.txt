import { Request, Response } from "../../../deps.ts";
import { Controller } from "../../utils/deno-api/controller.ts";
import  * as {{name}}Services from "./{{name}}.services.ts";
import { {{capitalizedName}}Schema, {{capitalizedName}} } from "./{{name}}.model.ts";
import { ValidatorFactory } from "../../utils/deno-api/validator-factory.ts";
import { CreatedResponse, UpdatedResponse } from "../../utils/deno-api/types.ts";

export async function add{{capitalizedName}}Ctrl(req: Request, res: Response<CreatedResponse>) {
  await Controller.passRequestToService(
    req,
    res,
    {{name}}Services.add{{capitalizedName}},
    {{capitalizedName}}.validator,
  );
}

export async function get{{capitalizedName}}Ctrl(req: Request, res: Response<{{capitalizedName}}Schema>) {
  await Controller.passRequestToService(
    req,
    res,
    {{name}}Services.get{{capitalizedName}},
    ValidatorFactory.buildGetValidator(),
  );
}

export async function list{{capitalizedName}}Ctrl(req: Request, res: Response<{{capitalizedName}}Schema[]>) {
  await Controller.passRequestToService(
    req,
    res,
    {{name}}Services.list{{capitalizedName}},
    ValidatorFactory.buildListValidator(),
  );
}

export async function put{{capitalizedName}}Ctrl(req: Request, res: Response<UpdatedResponse>) {
  await Controller.passRequestToService(
    req,
    res,
    {{name}}Services.update{{capitalizedName}},
    ValidatorFactory.buildUpdateValidator({{capitalizedName}}.schema),
  );
}

export async function patch{{capitalizedName}}Ctrl(req: Request, res: Response<UpdatedResponse>) {
  await Controller.passRequestToService(
    req,
    res,
    {{name}}Services.update{{capitalizedName}},
    ValidatorFactory.buildPatchValidator({{capitalizedName}}.schema),
  );
}

export async function delete{{capitalizedName}}Ctrl(req: Request, res: Response<UpdatedResponse>) {
  await Controller.passRequestToService(
    req,
    res,
    {{name}}Services.delete{{capitalizedName}},
    ValidatorFactory.buildDeleteValidator(),
  );
}