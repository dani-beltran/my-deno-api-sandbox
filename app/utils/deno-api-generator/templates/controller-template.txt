import { Request, Response } from "../deps.ts";
import { Controller, CreatedResponse, UpdatedResponse } from "./Controller.ts";
import { {{capitalizedName}}Service } from "../services/{{capitalizedName}}Service.ts";
import { {{capitalizedName}}Schema, {{capitalizedName}} } from "../models/{{capitalizedName}}.ts";
import { ValidatorFactory } from "../utils/ValidatorFactory.ts";

export abstract class {{capitalizedName}}Controller {
  static className = "{{name}}Controller";

  static async add{{capitalizedName}}(request: Request, response: Response<CreatedResponse>) {
    await Controller.handleRequest(
      request,
      response,
      {{capitalizedName}}Service.add{{capitalizedName}},
      {{capitalizedName}}.validator,
    );
  }

  static async get{{capitalizedName}}(request: Request, response: Response<{{capitalizedName}}Schema>) {
    await Controller.handleRequest(
      request,
      response,
      {{capitalizedName}}Service.get{{capitalizedName}},
      ValidatorFactory.buildGetValidator(),
    );
  }

  static async list{{capitalizedName}}(request: Request, response: Response<{{capitalizedName}}Schema[]>) {
    await Controller.handleRequest(
      request,
      response,
      {{capitalizedName}}Service.list{{capitalizedName}},
      ValidatorFactory.buildListValidator(),
    );
  }

  static async put{{capitalizedName}}(request: Request, response: Response<UpdatedResponse>) {
    await Controller.handleRequest(
      request,
      response,
      {{capitalizedName}}Service.update{{capitalizedName}},
      ValidatorFactory.buildUpdateValidator({{capitalizedName}}),
    );
  }

  static async patch{{capitalizedName}}(request: Request, response: Response<UpdatedResponse>) {
    await Controller.handleRequest(
      request,
      response,
      {{capitalizedName}}Service.update{{capitalizedName}},
      ValidatorFactory.buildPatchValidator({{capitalizedName}}),
    );
  }

  static async delete{{capitalizedName}}(request: Request, response: Response<UpdatedResponse>) {
    await Controller.handleRequest(
      request,
      response,
      {{capitalizedName}}Service.delete{{capitalizedName}},
      ValidatorFactory.buildDeleteValidator(),
    );
  }

}