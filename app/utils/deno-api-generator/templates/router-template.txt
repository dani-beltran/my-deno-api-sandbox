import {
  add{{capitalizedName}},
  delete{{capitalizedName}},
  get{{capitalizedName}},
  list{{capitalizedName}},
  update{{capitalizedName}},
} from "./{{name}}.services.ts";
import {
  convertAllSchemaItemsToOptional,
  getBodyValidation,
  getController,
  getParamsValidation,
  getQueryValidation,
  getRouter,
} from "../../utils/deno-api/api-methods.ts";
import {
  getSchema,
  listSchema,
} from "../../utils/deno-api/schema-definitions.ts";
import { pathJoin } from "../../../deps.ts";
import { {{capitalizedName}} } from "./{{name}}.model.ts";
import { IApiRouter } from "../../utils/deno-api/types.ts";

export const {{capitalizedName}}Router: IApiRouter = {
  /**
   * Returns the router path
   * @param basePath 
   * @returns 
   */
  getPath: (basePath: string) => {
    return pathJoin(basePath, "{{name}}s");
  },
  /**
   * Returns its router
   */
  getRouter: () => {
    return getRouter([{
      method: "post",
      path: "/",
      validation: [getBodyValidation({{capitalizedName}}.schema)],
      controller: getController(add{{capitalizedName}}, 201),
    }, {
      method: "get",
      path: "/:id",
      validation: [getParamsValidation(getSchema)],
      controller: getController(get{{capitalizedName}}),
    }, {
      method: "get",
      path: "/",
      validation: [getQueryValidation(listSchema)],
      controller: getController(list{{capitalizedName}}),
    }, {
      method: "put",
      path: "/:id",
      validation: [
        getParamsValidation(getSchema),
        getBodyValidation({{capitalizedName}}.schema),
      ],
      controller: getController(update{{capitalizedName}}),
    }, {
      method: "patch",
      path: "/:id",
      validation: [
        getParamsValidation(getSchema),
        getBodyValidation(convertAllSchemaItemsToOptional({{capitalizedName}}.schema)),
      ],
      controller: getController(update{{capitalizedName}}),
    }, {
      method: "delete",
      path: "/:id",
      validation: [getParamsValidation(getSchema)],
      controller: getController(delete{{capitalizedName}}),
    }]);
  },
};
